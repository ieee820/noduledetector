import h5py
from accurancyTools import *
from sklearn import ensemble
from datasets import *

trainingDataSetNames = ['Volume', 'PseudoRadius', 'Complexity',
    'BoundingBox2Volume', 'BoundingBoxAspectRatio', 'IntensityMax',
    'IntensityMin', 'CloseMassRatio', 'IntensityHist',
    'gaussianCoeffsz', 'Gradient', 'ssim']

senaryo = get_sets(trainingDataSetNames)

alphaStep = 30
alphaStart = 0.4
alphaStop = 0.8
alphaRange = numpy.linspace(alphaStart, alphaStop, alphaStep)
treeCount = 10
roc_iterator = 0
random_seed = 12
numpy.random.seed(random_seed)

totalpositives = 0
f = h5py.File('../randomforest_results_wg.h5', 'w')

test_count = len(senaryo['test_sets'])
TPMAT = numpy.zeros((test_count, alphaStep))
FPMAT = numpy.zeros((test_count, alphaStep))
train_set = senaryo['train_set']
a = 0                                                           # Alpha test iterator
s_ite = 0                                                       # Set iterator
for test_set in senaryo['test_sets']:
    totalpositives += sum(test_set.labels == 1)
    rf = ensemble.RandomForestClassifier(n_estimators=treeCount, random_state=(roc_iterator + 1) * 10)
    rf.fit(train_set.data, numpy.ravel(train_set.labels))
    p = rf.predict_proba(test_set.data)
    for alpha in alphaRange:
        pred_bias = numpy.array([1-alpha, alpha])
        results = calculate_accuracy(1, p, test_set.labels, bias=pred_bias)
        TPMAT[s_ite, a] = results['tpnumber']
        FPMAT[s_ite, a] = results['fpnumber']
        a += 1
    s_ite += 1
    a = 0

avg_tp_rate = numpy.sum(TPMAT, axis=0)
avg_tp_rate /= totalpositives
avg_fp_number = numpy.sum(FPMAT, axis=0)
avg_fp_number /= test_count
f.close()

#print 'Mult. : ', mult
print 'TreeCount :', treeCount
for x in range(0, 29):
        print 'Alpha : ', format(alphaRange[x], '.3f'), '& TP : ', format(avg_tp_rate[x], '.3f'), \
              '& FP : &', format(avg_fp_number[x], '.3f')


